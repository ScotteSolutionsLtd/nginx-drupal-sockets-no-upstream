#
# Site Name: example.com
# Copy and edit this file to create a new site in your nginx config.
# Logs here are written to vhost users' home directories. Feel free
# to change for your own usage and check file permissions. nginx will
# need to be able to write to the directory.
# 
server {
	listen 80;
	server_name	example.com;
	access_log	/home/example.com/logs/access.log;
	error_log	/home/example.com/logs/error.log;
	root		/home/example.com/public_html;
	
	# Comment out if you want to send 404's to Drupal (not recommended;
	# however then you wouldn't have to make a static 404.html page, complete
	# with analytics which this already config comes with. You should probably
	# open and adjust that file too.)
    error_page 404 /404.html;
	
	# When you make a *new* vhost, you'll get a different socket identifier.
	# Put the socket info in this line:
	set			$php_socket	unix:/var/php-nginx/12345678901234.sock/socket;
	
	# This is going to be a Drupal 7 website: (otherwise comment out or use other
	# configuration include file)
	include 	drupal7;
	
	# SSL Support; adjust as necessary
	listen 		443 ssl;
	ssl_certificate /home/example.com/ssl.cert;
	ssl_certificate_key /home/example.com/ssl.key;
	ssl 		off;
	
	# As for your SSL config, the nginx default is stupid high encryption and includes SSLv2
	# which is breakable. This disables SSLv2 and the insane encryption that is better than
	# what most militaries use. This lightens the load on the server for SSL connections.
	ssl_protocols  SSLv3 TLSv1;
	ssl_ciphers RC4:HIGH:!aNULL:!MD5:!kEDH;
	ssl_prefer_server_ciphers   on;
	
	# Turn on teh cache$|:
	gzip_static on;
}

# Use 301's to send to the URL *without* the www
server {
    listen 80; # IPv4
    server_name www.example.com;
    return 301 $scheme://example.com$request_uri;
}
